chrome.runtime.onInstalled.addListener(function () {
  chrome.contextMenus.create({
    id: "some-menu-item",
    title: "コードレビュー用プロンプトを貼り付ける",
    contexts: ["editable"]
  });
});

chrome.contextMenus.onClicked.addListener(function (info, tab) {
  if (info.menuItemId === "some-menu-item") {
    chrome.scripting.executeScript({
      target: { tabId: tab.id },
      function: insertText
    });
  }
});


function insertText() {
  const textToPaste = `
コード変更差分を以下の観点からレビューしてください。

--------------------------------------------

【要求事項】
1. **システム障害防止の視点**：
    - 特筆箇所がなければ記載不要です。
    - 新規・変更されたコードが既存の機能やシステムワークフローに不具合を引き起こす可能性はないか精査してください。
    - 潜在的なランタイムエラー（例: Null参照、型不整合、範囲外アクセス）が発生しうる箇所を特定してください。
    - 外部依存関係（API呼び出し、ライブラリ、コンポーネント間通信）による潜在的な障害要因を指摘してください。

2. **コードの可読性**：
    - 特筆箇所がなければ記載不要です。
    - 変数・関数名、コメント、コードレイアウトなど、可読性・理解しやすさを向上させるための改善点を示してください。
    - 一貫性のある命名規則やコーディングスタイルへの改善提案を行ってください。

3. **オブジェクト指向の視点**：
    - 特筆箇所がなければ記載不要です。
    - オブジェクト指向的な設計改善（例えば、SOLID原則の遵守、責務分割など）を指摘してください。

4. **セキュリティの視点**：
    - 特筆箇所がなければ記載不要です。
    - 入力値検証やエラー処理が十分に行われているか確認し、不正な入力による脆弱性がないか評価してください。
    - セキュリティホールとなりうる処理（認証・認可の欠如、SQLインジェクション、XSS、情報漏洩など）が存在しないか指摘してください。
    - 安全な暗号化や適切な秘密情報の扱いが行われているか検証してください。

5. **既存動作への影響範囲特定**：
    - 特筆箇所がなければ記載不要です。
    - この変更が既存コードや関連コンポーネントへ与える影響範囲を明確化してください。
    - **変数を削除した場合、その削除が引き起こす影響（コンパイルエラー、参照箇所の不整合など）を確認してください。**
    - **関数の引数を変更した場合、その関数が利用されている全ての箇所を洗い出し、影響範囲を明確化してください。**

6. **考慮不足回避**：
    - 特筆箇所がなければ記載不要です。
    - エッジケースや異常系シナリオを洗い出し、変更によってカバーされていないケースを特定してください。
    - 将来的な運用負荷（パフォーマンス、スケーラビリティ、メンテナンスコスト）への懸念があれば具体的に示してください。

7. **処理のフロー図作成**：
    - 特筆箇所がなければ記載不要です。
    - mermaidの構文をつかって処理の流れを「フロー図」または「シーケンス図」で解説してください。

8. **表形式のテストケース一覧作成**：
    - 「No.」「対象箇所」「テスト観点」「前提条件・入力」「期待結果」「コメント（解説）」の表形式で表示をお願いします。
    - 各テストケースには、コメントアウトの内容を参考に解説を設けてください。

【出力フォーマット要望】
- マークダウン形式で回答してください。
- 各変更差分ファイルに観点ごとのレビューをしてください。
- ほめる必要はありません、さらに修正したほうがよい内容がある場合のみ、レビューコメントと修正案を記載してください。

#### 以下変更差分 ####

`;
    const activeElement = document.activeElement;

  if (activeElement.tagName === "TEXTAREA" || activeElement.tagName === "INPUT") {
    activeElement.value += textToPaste;
  } else if (activeElement.isContentEditable) {
    activeElement.textContent += textToPaste;
  } else {
    alert("選択された要素にテキストを挿入できません。");
  }
}
